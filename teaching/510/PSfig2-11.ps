%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.0
%%For: (Fuxing) (Dartmouth College)
%%Title: (PSfig2.11.ps)
%%CreationDate: (3/28/97) (9:25 AM)
%%BoundingBox: -20 215 533 594
%%HiResBoundingBox: -19.5314 215.2481 532.0314 593.7481
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Courier
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 2.1
%AI3_ColorUsage: Color
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 31 31 583 761
%AI3_DocumentPreview: Macintosh_Pic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -62 444 1.5 783 470 26 0 1 8 44
%AI5_OpenViewLayers: 7
%%EndComments
%%BeginProlog

% ------------------------------------------------------
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

userdict /Adobe_level2_AI5 23 dict dup begin
	put

% use packed arrays immediately
	% packedarray emulation
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
		end
		0
	} if
	pop

% activate packing now
	userdict /defaultpacking currentpacking put true setpacking


% initialize, terminate
	% note : no binding loop needed here by design

	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
			end
		} if
	} bind def

% mark for later stack clean-up
	mark

% custom color business
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch aload pop pop
			4
			{
				4 index mul 4 1 roll
			} repeat
			5 -1 roll pop
			setcmykcolor
		}	% don't bind 'setcmykcolor in this procedure
		def
	} if

%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)
%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def
	
%	newer version handles errors on clones with cvx or exec which would leave junk on the stack
%	(bh 12/2/93)
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def

	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put

% test for Level 2 availability
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put


/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq
{
	begin
		60	% 60 lpi is default
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
	end
} bind def

userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put

level2? not
	{
		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)

		% cmyk => gray conversion emulation
		% note this revision approved by Ed Taft
		% for correcting the out of gamut problem
		% in our current emulations

		% don't bind these guys so 'setgray/currentgray can be overloaded
		/setcmykcolor where not
		{
			% see red book II, pp. 305
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if

		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if


		% LEVEL 2 EMULATIONS

		% setoverprint emulation
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if

		% selectfont emulation
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if

		% cshow emulation
		/cshow where not
		{
			% {proc} (string)
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if

% clean up
	cleartomark

	/anyColor?
	{
		add add add 0 ne
	} bind def

	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def

	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def

	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put

% *** other separation state tests if we're not on a composite page	
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
		end
	} if

	end defaultpacking setpacking

%%EndResource

% ------------------------------------------------------
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize	% varsDict mainDict initialize -
{
	begin	% begin main procset
	begin	% begin vars procset
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
	end

	% take main and vars off the stack
	end
	end

	Adobe_typography_AI5 begin
} def
/terminate	% - terminate -
{
	currentdict Adobe_typography_AI5 eq
	{
		end
	} if
} def

% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef

	% pointer for sequential encodings
	/_pntr 0 ddef
	{
		% get bottom object
		counttomark -1 roll

		% is it a mark ?
		dup type dup /marktype eq
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....

			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop

	% return the modified encoding
	_tempEncode
} def

/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def

% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ
{
	% set weight vector (if present)
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse

	% platform dependent coding flag
	/_useNativeEncoding exch def

	% pop fontScript & direction
	pop pop

	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict

	begin

	% copy all the values but the FID
	% into the new dictionary
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	% discard last mark
	pop

	% define FontName
	/FontName exch def

	% if no re-encoding stream is present
	% then if the base encoding vector of the font
	% is the same as StandardEncoding
	% and the use platform encoding flag is true
	% then install AI platform encoding
	% else leave the base encoding in effect

	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		% clean up
		cleartomark
	}
	{
		% custom encoding to be done
		% start off with a copy of the font's standard encoding
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
	end

	% register the new font
	definefont pop
} def

% text painting operators
/tr	% string tr ax ay string 
{
	_ax _ay 3 2 roll
} def
/trj	% string trj cx cy fillchar ax ay string 
{
	_cx _cy _sp _ax _ay 6 5 roll
} def

/a0
{
	/Tx	% text							% textString Tx -
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

/e0
{
	/Tx	% text							% textString Tx -
	{
		tr _psf
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj _pjsf
	} ddef
} def

/e1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

/i0
{
	/Tx	% text							% textString Tx -
	{
		tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj jsp
	} ddef
} def

/i1
{
	W N
} def

/o0
{
	/Tx	% text							% textString Tx -
	{
		tr sw rmoveto
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj swj rmoveto
	} ddef
} def

/r0
{
	/Tx	% text							% textString Tx -
	{
		tr _ctm _pss
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		trj _ctm _pjss
	} ddef
} def

/r1
{
	/Tx	% text							% textString Tx -
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj	% justified text				% textString Tj -
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def

% font operators

% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def

/TO	% end text					% TO -
{
	iTe _ctm setmatrix newpath
} def

% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def

/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def

% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def

/iTm	% internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def

/Tm	% set text matrix				% a b c d tx ty Tm -
{
	_tm astore pop iTm 0 0 moveto
} def

/Td	% translate text matrix 		% tx ty Td -
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def

/iTe	% end render					% - iTe -
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def


% Attributes
/Ta	% set alignment					% alignment Ta -
{
	pop
} def

/Tf	% set font name and size		% fontname size Tf -
{
	dup 1000 div /_fScl exch ddef
% was  (bh 11/23/93)
% 	exch findfont exch scalefont setfont
%
	selectfont
} def

/Tl	% set leading					% leading paragraphLeading Tl -
{
	pop
	0 exch _leading astore pop
} def

/Tt	% set user tracking				% userTracking Tt -
{
	pop
} def

/TW	% set word spacing				% minSpace optSpace maxSpace TW -
{
	3 npop
} def

/Tw	% set computed word spacing		% wordSpace Tw
{
	/_cx exch ddef
} def

/TC	% set character spacing			% minSpace optSpace maxSpace TC -
{
	3 npop
} def

/Tc	% set computed char spacing 	% charSpace Tc -
{
	/_ax exch ddef
} def

/Ts	% set super/subscripting (rise)	% rise Ts -
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def

/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
	3 npop
} def

/Tz	% set horizontal scaling		% scalePercent Tz -
{
	100 div /_hs exch ddef
	iTm
} def

/TA	% set pairwise kerning			% autoKern TA -
%	autoKern = 0 -> no pair kerning
%			 = 1 -> automatic pair kerning
{
	pop
} def

/Tq	% set hanging quotes			% hangingQuotes Tq -
%	hangingQuotes 	= 0 -> no hanging quotes
%			 		= 1 -> hanging quotes
{
	pop
} def

/Th	% set hyphenation				% hyphenate? limitLines? minLead minTail maxLines Th -
% 	hyphenate?	= 0 -> don't hyphenate
%				= 1 -> do hyphenate
% 	limitLines? = 0 -> no limit
%				= 1 -> limit consecutive hyphenated lines
%	minLead		Closest hyphen to beginning of word (0..n)
% 	minTail		Closest hyphen to end of word (0..n)
% 	maxLines	Maximum number of consecutive hyphenated lines (1..n)
{
	pop pop pop pop pop
} def


% Text Bodies
/TX
{
	pop
} def

% /Tx	% non-justified text			% textString Tx -
% /Tj	% justified text				% textString Tj -

/Tk	% kern							% autoKern kernValue Tk -
%  	autoKern = 0 -> manual kern, = 1 -> auto kern
%	kernValue = kern value in em/1000 space
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
	2 npop
} def

/T*	% carriage return & line feed	% - T* -
{
	_leading aload pop neg Td
} def

/T*-	% carriage return & negative line feed	% - T*- -
{
	_leading aload pop Td
} def

/T-	% print a discretionary hyphen	% - T- -
{
	% backup the pen position by the letterspacing so that
	% full-justified, auto-hyphenated lines display properly
	% [John Farmer 11/18/95]
	_ax neg 0 rmoveto
	_hyphen Tx
} def

/T+	% discretionary hyphen hyphen	% - T+ -
{
} def

/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def

/TS	% special chars					% textString justified TS -
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def

% Tab extensions for 5.5 (Glenn Reid 1/26/94)

/Xb % begin tab definitions			% <unused> tabCount Xb -
{
	pop pop
} def
/Tb /Xb load def

/Xe % one tab stop					% leader(char) decimal(char) type(int) distance Xe -
{
	pop pop pop pop
} def
/Te /Xe load def

/XB % end tab definitions			% - XB -
{
} def
/TB /XB load def

currentdict readonly pop
end
setpacking

%%EndResource

% ------------------------------------------------------
%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0
% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images
% Version 1.0 12/25/95
% Copyright (C) 1995-96
% Adobe Systems Incorporated
% All Rights Reserved
% ------------------------------------------------------

userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 17 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin

% ------------------------------------------------------
% Routine Overview
% 
%	String Iterators
%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)
%		WalkCMYKString (given a single source string, get the components and call a proc)
% 
%	Level1 Emulator Routines
%		StuffRGBIntoGrayString
%		RGBToGrayImageProc
%		StuffCMYKIntoGrayString 
%		CMYKToGrayImageProc 
%		ColorImageCompositeEmulator 
% 
%	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)
%		CMYKToSeparatedCMYKImageProc
% 
%	ColorImage and Utility Routines.
%		FourEqual
%		TestPlateIndex
%		colorimage
% 
% ------------------------------------------------------	

/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def

/terminate { end } def

currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 14 dict def
} if

Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
end

/WalkRGBString null def
/WalkCMYKString null def

/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def

/SeparateCMYKImageProc null def

/FourEqual null def
/TestPlateIndex null def

% define _colorimage if it doesn't already exist
currentdict /_colorimage known not
{
	/colorimage where
	{
		% sourcedictionary (systemdict or a separation proc redefinition)
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if

/_currenttransfer systemdict /currenttransfer get def

/colorimage null def
/XI null def

% ------------------------------------------------------
% rgb proc out --WalkRGBString--
% ------------------------------------------------------

/WalkRGBString
{
	% rgb proc out
	0 3 index

	% rgb proc out outindex rgb
	dup length 1 sub 0 3 3 -1 roll
	{
		% rgb proc out outindex rgb index
		3 getinterval { } forall

		% call the stuff proc
		% rgb proc out outindex r g b
		5 index exec

		% push rgb for the next loop iteration
		% rgb proc out outindex
		3 index
		% rgb proc out outindex rgb
	} for
	
	% clean up the stack
	% rgb proc out outindex rgb
	 5 { pop } repeat

} def

% ------------------------------------------------------
% cmyk proc gray --WalkCMYKString--
% ------------------------------------------------------

/WalkCMYKString
{
	% cmyk proc gray
	0 3 index

	% cmyk proc gray grayindex cmyk
	dup length 1 sub 0 4 3 -1 roll
	{
		% cmyk proc gray grayindex cmyk index
		4 getinterval { } forall
		
		% cmyk proc gray grayindex c m y k
		6 index exec
		
		% cmyk proc gray grayindex
		3 index
		
		% cmyk proc gray grayindex cmyk
	} for
	
	% clean up the stack
	% cmyk proc gray grayindex cmyk
	5 { pop } repeat
	
} def

% ------------------------------------------------------
% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex
% ------------------------------------------------------

/StuffRGBIntoGrayString
{
	% gray grayindex r g b
	.11 mul exch
	
	% gray grayindex r bk g
	.59 mul add exch
	
	% gray grayindex bkgk r
	.3 mul add
	
	% gray grayindex k
	cvi 3 copy put
	
	% gray grayindex k
	pop 1 add
} def

% ------------------------------------------------------
% --RGBToGrayImageProc-- string
% ------------------------------------------------------

/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin	
		% call the source proc to get the chunky rgb string
		sourcearray 0 get exec

		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
		% rgb
		dup length 3 idiv string

		% roll off a copy of the gray string
		% rgb gray
		dup 3 1 roll 
		
		% push the stuff proc that we want called by WalkRGBString
		% gray rgb gray
		/StuffRGBIntoGrayString load exch

		% call the rgb conversion iterator
		% gray rgb proc gray
		WalkRGBString

		% return the gray string
		% gray	
	end
} def

% ------------------------------------------------------
% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex
% ------------------------------------------------------

/StuffCMYKIntoGrayString
{
	% gray grayindex c m y k
	exch .11 mul add
	
	% gray grayindex c m yk
	exch .59 mul add
	
	% gray grayindex c mkyk
	exch .3 mul add
	
	% pin k to 255
	% gray gray index k
	dup 255 gt { pop 255 } if
	
	% gray grayindex k
	255 exch sub cvi 3 copy put
	
	% gray grayindex k
	pop 1 add
} def

% ------------------------------------------------------
% --CMYKToGrayImageProc-- string
% ------------------------------------------------------

/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		% call the source proc to get the chunky cmyk string
		sourcearray 0 get exec

		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
		% cmyk
		dup length 4 idiv string

		% roll off a copy of the gray string
		% cmyk gray
		dup 3 1 roll 
		
		% push the stuff proc that we want called by WalkCMYKString
		% gray cmyk gray
		/StuffCMYKIntoGrayString load exch

		% call the cmyk iterator
		% gray cmyk proc gray
		WalkCMYKString

		% return the gray string
		% gray
	end
} def

% ------------------------------------------------------
% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--
% ------------------------------------------------------

/ColorImageCompositeEmulator
{
	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone
	% calls colorimage on a level 1 device with planar data.
	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.
	pop true eq
	{
		% pop off the parameters and return
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				% save off the original chunky source function
				sourcearray 0 3 -1 roll put
			
				% push the appropriate cover proc
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
			end
		} if
		image
	} ifelse
} def

% ------------------------------------------------------
% --SeparateCMYKImageProc-- string
% ------------------------------------------------------

/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin

		sourcecount 0 ne
		{
			% planar case: call the source proc for the current plate and return its result
			sourcearray plateindex get exec
		}
		{			
			% call the source proc to get the chunky cmyk string
			sourcearray 0 get exec
			
			% make a grayscale string of the same pixel count (ouch, pull me out of this loop)
			% cmyk
			dup length 4 idiv string
			
			% cmyk
			0 2 index
			
			% cmyk gray grayindex cmyk
			plateindex 4 2 index length 1 sub
			{
				% cmyk gray grayindex cmyk channelindex
				get 255 exch sub
				
				% cmyk gray grayindex grayvalue
				3 copy put pop 1 add
				
				% cmyk gray grayindex
				2 index
			} for

			% return the gray string
			% cmyk gray grayindex cmyk
			pop pop exch pop
		} ifelse
	end
} def
	
% ------------------------------------------------------
% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--
% ------------------------------------------------------

/FourEqual
{
	% s1 s2 s3 s4 c1 c2 c3 c4
	4 index ne
	{
		pop pop pop false
	}
	{
		% s1 s2 s3 s4 c1 c2 c3
		4 index ne
		{
			pop pop false
		}
		{
			% s1 s2 s3 s4 c1 c2
			4 index ne
			{
				pop false
			}
			{
				% s1 s2 s3 s4 c1
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def

% ------------------------------------------------------
%  --TestPlateIndex-- plateindex
% ------------------------------------------------------

/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		% assume we're not separating
		/plateindex -1 def

		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore

			% cyan plate?
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				% magenta plate?
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					% yellow plate?
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						% black plate
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
	end
} def

% ------------------------------------------------------
% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--
% ------------------------------------------------------

/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def

		% setup for following if statement
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
	end
	
	% is this not 1 or 8 bit?
	{
		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.
		/_colorimage load null ne
		{
			% call the original (they probably punt if we're separating)
			_colorimage
		}
		{
			% pop off the parameters and return
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating
		% an image to a custom plate. The last case assumes that the separation procs surrounding us
		% take care of punching out
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			% Call the colorimage emulator if we're printing to a level 1 device
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				% call image if this is a grayscale so that Quark doesn't die on custom plates
				dup 1 eq
				{
					pop pop image
				}
				{
					% draw to the null device if we're on a custom plate
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						% stolen from PhotoShop
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						% push the appropriate transfer proc (first case is negative
						% second case is positive) and call settransfer
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					% restore from the null device if necessary
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			% Are we separating a grayscale image?
			dup 1 eq
			{
				% let the surrounding separation procset handle the separation
				pop pop
				image
			}
			{
				% pop channelcount and multiplesources since they're not used by the image operator
				pop pop

				% Prepare to call the image operator with a cover proc
				Adobe_ColorImage_AI6_Vars begin
					% save off the source procs for our cover proc
					% width height bitsperpixel matrix firstsource...lastsource
					sourcecount -1 0
					{			
						% width height bitsperpixel matrix firstsource...lastsource index
						exch sourcearray 3 1 roll put
					} for

					/SeparateCMYKImageProc load
				end

				% bypass the separation procset since some applications don't handle chunky and the
				% old separator doesn't handle colorimage
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def

% ------------------------------------------------------
% --XI--
% ------------------------------------------------------

/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			% skip the %BeginBinary comment
			currentfile 128 string readline pop pop
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			% synch the PostScript fill with Illustrator's notion of the current fill
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
			
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			% call image if passed grayscale or bitmap data. Some applications
			% die if colorimage is called with gray data.
			XIChannelCount 1 eq
			{
				% Some applications refuse to separate a grayscale image to the black plate if
				% the currentgray is white. Hack around.
				
				gsave
				0 setgray
				
				image
				
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse

		grestore
	end
} def
	
end

%%EndProcSet

% ------------------------------------------------------
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
% ------------------------------------------------------

currentpacking true setpacking

% 71 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put

% paint operands
/_eo false def
/_lp /none def
/_pf
{
} def	% paint fill
/_ps
{
} def	% paint stroke
/_psf
{
} def	% paint string fill
/_pss
{
} def	% paint string stroke
/_pjsf
{
} def	% paint justified string fill
/_pjss
{
} def	% paint justified string stroke
/_pola 0 def
/_doClip 0 def

% paint operators
/cf currentflat def	% - cf flatness

% typography operands
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def	% y character spacing
/_cx 0 def	% x word spacing
/_cy 0 def	% y word spacing
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def

% typography operators
/Tx
{
} def
/Tj
{
} def

% compound path operators
/CRender
{
} def

% printing
/_AI3_savepage
{
} def

% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def

% pattern operands
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def

% discard variables (12 total)

/discardSave null def	% holds save used in discard loop
/buffer 256 string def	% line buffer string : assume 256 chars/line
/beginString null def	% begin delimiter
/endString null def	% end delimiter
/endStringLength null def	% holds buffer size for reading by byte technique
/layerCnt 1 def	% internal variables for discard loop
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def

% variable for doing clipping without rendering
/clipForward? false def

% end the vars dictionary
end
% =========================================


userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if

userdict /Adobe_Illustrator_AI5 get begin


% initialization
/initialize	% - initialize -
{
	% pushing main on the stack
	Adobe_Illustrator_AI5 dup begin

	% push the vars dictionary
	Adobe_Illustrator_AI5_vars begin

	% at this point the main and vars dictionaries
	% are in the state we wish them to be
	% on exit from the initialize call

	% bind the procedures in the discard dictionary
	discardDict
	{
		bind pop pop
	} forall

	% begin the nc dictionary
	dup /nc get begin

	% bind the procs in main
	{
		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall

	% turn off 'nc
	end

	newpath

	% on exit we have main and vars on top of dict stack
} def

/terminate	% - terminate -
{
	end
	end
} def

% definition operators
/_	% - _ null
null def
/ddef	% key value ddef -
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput	% key value literal xput -
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
	end
} def
/npop	% integer npop -
{
	{
		pop
	} repeat
} def

% marking operators
/sw	% ax ay string sw x y
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj	% cx cy fillchar ax ay string swj x y
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss	% ax ay string matrix ss -
{
	4 1 roll
	{
		% matrix ax ay char 0 0 {proc} -
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss	% cx cy fillchar ax ay string matrix jss -
{
	4 1 roll
	{
		% cx cy fillchar matrix ax ay char 0 0 {proc} -   
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def

% path operators
/sp	% ax ay string sp -
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp	% cx cy fillchar ax ay string jsp -
{
	{
		% cx cy fillchar ax ay char 0 0 {proc} -
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def

% path construction operators
/pl	% x y pl x y
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def

/setstrokeadjust where
{
	pop true setstrokeadjust
	/c	% x1 y1 x2 y2 x3 y3 c -
	{
		curveto
	} def
	/C
	/c load def
	/v	% x2 y2 x3 y3 v -
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y	% x1 y1 x2 y2 y -
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l	% x y l -
	{
		lineto
	} def
	/L
	/l load def
	/m	% x y m -
	{
		moveto
	} def
}
{
	% else
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse

% graphic state operators
/d	% array phase d -
{
	setdash
} def
/cf
{
} def	% - cf flatness
/i	% flatness i -
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j	% linejoin j -
{
	setlinejoin
} def
/J	% linecap J -
{
	setlinecap
} def
/M	% miterlimit M -
{
	setmiterlimit
} def
/w	% linewidth w -
{
	setlinewidth
} def

% path painting operators
/XR	% flag XR -
{
	0 ne
	/_eo exch ddef
} def
/H	% - H -
{
} def
/h	% - h -
{
	closepath
} def
/N	% - N -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n	% - n -
{
	N
} def
/F	% - F -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f	% - f -
{
	closepath
	F
} def
/S	% - S -
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s	% - s -
{
	closepath
	S
} def
/B	% - B -
{
	_pola 0 eq
	{
		_doClip 1 eq	% F clears _doClip
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b	% - b -
{
	closepath
	B
} def
/W	% - W -
{
	/_doClip 1 ddef
} def
/*	% - [string] * -
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)
	newpath
} def

% group operators
/u	% - u -
{
} def
/U	% - U -
{
} def
/q	% - q -
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q	% - Q -
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u	% - *u -
{
	_pola 1 add /_pola exch ddef
} def
/*U	% - *U -
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D	% polarized D -
{
	pop
} def
/*w	% - *w -
{
} def
/*W	% - *W -
{
} def

% place operators
/`	% matrix llx lly urx ury string ` -
{
	/_i save ddef

% * special case of clipping forward without rendering
	% use 'nulldevice if true
	clipForward?
	{
		nulldevice
	} if

	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~	% - ~ -
{
	end
	_i restore
} def

% color operators
/O	% flag O -
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R	% flag R -
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g	% gray g -
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G	% gray G -
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k	% cyan magenta yellow black k -
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K	% cyan magenta yellow black K -
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x	% cyan magenta yellow black name gray x -
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X	% cyan magenta yellow black name gray X -
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def

% locked object operator
/A	% value A -
{
	pop
} def

% annotate page operator
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def



% object tag operator
% joe holt November 20, 1994

% /name (value) XT
/XT {
	pop pop
} def


% begin layer PostScript implementation

% general purpose discard loop
% works on early level 1 (v.23, v.38) PostScript printers
% version 0.02 04/03/93
% Bill Woodruff

% constraints :

% if nested discards must be handled
% then the begin and end delimiting
% strings must be of equal length

% arguments

% #nestingFlag
% #nestingFlag = 0  				no nesting
% #nestingFlag = 1  				nesting

% non-nested case
% note : since the non-nested case is invoked
% after the ocurrence of a beginning string
% we only have to look for the ending string
% it is not necessary to specify a beginning string

% 0 (endString) 

% nested case

% (beginString) 1 (endString) 

% the discard procedure is defined in the main dictionary
% it turns the discard dictionary on to execute the discard function
/discard
{
	% test for version, hash a key
	% get and execute the discard procedure from dictionary
	% execute it in a stopped context so we can bail with 'stop
	% wrap it in a save so we don't have to reset variables
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
	end
	discardSave restore
} bind def

% build the discard dictionary which will contain only procedures
userdict /discardDict 7 dict dup begin
put

% pre 38 initialization
/pre38Initialize
{
	% used as buffer size for reading by byte technique	
	/endStringLength endString length store

	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer
} def

% for <=38	
/shiftBuffer
{
	% shift last chars of newBuff to start of newBuff
	newBuff 0 newBuffButFirst putinterval
	% new character into last byte of newBuff
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def

% discard procedures

% no nesting, older ps
0
{
	pre38Initialize
	mark
	% fill the buffer
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def

% nesting, older ps
1
{
	pre38Initialize

	/beginString exch store

	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse

			shiftBuffer
		} loop
	} if
} def

% no nesting, newer ps
2
{
	mark
	{
		% read a line : exit if end of file reached
		currentfile buffer readline not
		{
		stop
		} if

		% end of layer ?
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def

% nesting, newer ps
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		% read a line : exit if end of file reached
		currentfile buffer readline not
		{
		stop
		} if

		% start of layer ?
		dup beginString eq
		{
			% update layer counter
			pop /layerCnt dup load 1 add store
		}
		{
			% end of layer ?
			endString eq
			{
				% stop if we're not nested
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					% nested : decrement layer counter
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def

% end discard dictionary
end

% define the dictionary for clipping without rendering

userdict /clipRenderOff 15 dict dup begin
put

% flag for marking this dictionary as active
% so we can test in /` and wrap placed
% elements in nulldevice
% /clipForward? true def

% re-define rendering primitives to clip and newpath
% based on value of /_doClip flag
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall

% modify 'Tr so Tj and Tx are never set up by
% the calls to 'a0, 'e0, etc.
/Tr /pop load def

% special case of 'cshow ?
% is so, we'll have to overload toplevels
% /patternashow /patternawidthshow
% /patternashowstroke
% /patternawidthshowstroke
% /ss /jss /sp /jsp

% perhaps we can bracket out patterns at a higher level ?
% for example, by modifying 'E to pop off its parameters

% call to 'show in 'patternpath ?
% calls to 'ashow in '_psf ?
% calls to 'awidthshow in '_pjsf ?
% calls to 'widthshow in '_jss and '_jsp ?

% disable gradient operators
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def

% end dictionary for clipping without rendering
end

/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop

	% #masks #printing 

	% assume that
	% masks = 1 masks forward, masks = 0 no masking or only local masking	

	% do the right thing for printing and masking layer
	0 eq
	{
		% non-printing layer

		0 eq
		{
			% no masking forward from this layer
			% nested discard call
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			% masking forward from this layer
			% no printing, but clip path must survive
			
			% set the clipForward? flag in the vars dict
			/clipForward? true def
			
			% redefine Tx and Tj in the vars dict
			/Tx /pop load def
			/Tj /pop load def
			
			% turn on the no rendering dictionary
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		% printing layer

		% encapsulate layer with 'save
		% only if there is no masking forward

		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def

% end layer :
% assume that if discardSave is non-null
% then the layer was bracketed by 'save...restore
% else we must test for clipping forward
/LB	% ==> Lb ==> .....
{
	discardSave dup null ne
	{
		% undo the save
		restore
	}
	{
		pop

		clipForward?
		{
			% assume dictionary stack :

			%		vars			
			%		clipRenderOff			
			%		main

			currentdict
			end
			end
			begin

			% dictionary stack :

			%		vars			
			%		main
					
			/clipForward? false ddef

		} if
	} ifelse
} bind def

% begin palette discard
% assume no nesting
/Pb	% topLeftCell selected Pb -
{
	pop pop
	% non nested discard
	0 (%AI5_EndPalette) discard
} bind def

% other type of discard
% assume no nesting
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def

% express layer name
/Ln /pop load def	% ==> Ln ==> .....

% path center-point flag operator
/Ap	% value Ap -
/pop load def

% device-independent flatness
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def

% multi-layer clipping
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def

% null color operators
/nc 3 dict def
nc begin
/setgray	% gray setgray -
{
	pop
} bind def
/setcmykcolor	% cyan magenta yellow black setcmykcolor -
{
	4 npop
} bind def
/setcustomcolor	% object tint setcustomcolor -
{
	2 npop
} bind def
% exit 'nc dictionary
currentdict readonly pop
end

% exit main dictionary
% currentdict readonly pop
end
setpacking

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
Adobe_level2_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
3 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Red & Yellow)
(Red & Yellow) 0 2 Bd
[
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EF
EFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BF
BFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AF
AFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F
9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999
>
0
1 %_Br
[
0 1 0.6 0 1 50 100 %_Bs
0 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Blue Radial)
(Yellow & Blue Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_Bs
1 1 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 9 Pb
Pn
Pc
1 g
Pc
0 g
Pc
0 0 0 0 k
Pc
0.75 g
Pc
0.5 g
Pc
0.25 g
Pc
0 g
Pc
Bb
2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0 0 0 k
Pc
0.5 0 0 0 k
Pc
0.75 0 0 0 k
Pc
1 0 0 0 k
Pc
0.25 0.25 0 0 k
Pc
0.5 0.5 0 0 k
Pc
0.75 0.75 0 0 k
Pc
1 1 0 0 k
Pc
Bb
2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0 0 k
Pc
0 0.5 0 0 k
Pc
0 0.75 0 0 k
Pc
0 1 0 0 k
Pc
0 0.25 0.25 0 k
Pc
0 0.5 0.5 0 k
Pc
0 0.75 0.75 0 k
Pc
0 1 1 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0 0.25 0 k
Pc
0 0 0.5 0 k
Pc
0 0 0.75 0 k
Pc
0 0 1 0 k
Pc
0.25 0 0.25 0 k
Pc
0.5 0 0.5 0 k
Pc
0.75 0 0.75 0 k
Pc
1 0 1 0 k
Pc
(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
Pc
0.25 0.125 0 0 k
Pc
0.5 0.25 0 0 k
Pc
0.75 0.375 0 0 k
Pc
1 0.5 0 0 k
Pc
0.125 0.25 0 0 k
Pc
0.25 0.5 0 0 k
Pc
0.375 0.75 0 0 k
Pc
0.5 1 0 0 k
Pc
0 0 0 0 k
Pc
0 0.25 0.125 0 k
Pc
0 0.5 0.25 0 k
Pc
0 0.75 0.375 0 k
Pc
0 1 0.5 0 k
Pc
0 0.125 0.25 0 k
Pc
0 0.25 0.5 0 k
Pc
0 0.375 0.75 0 k
Pc
0 0.5 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0 0.25 0 k
Pc
0.25 0 0.5 0 k
Pc
0.375 0 0.75 0 k
Pc
0.5 0 1 0 k
Pc
0.25 0 0.125 0 k
Pc
0.5 0 0.25 0 k
Pc
0.75 0 0.375 0 k
Pc
1 0 0.5 0 k
Pc
0 0 0 0 k
Pc
0.25 0.125 0.125 0 k
Pc
0.5 0.25 0.25 0 k
Pc
0.75 0.375 0.375 0 k
Pc
1 0.5 0.5 0 k
Pc
0.25 0.25 0.125 0 k
Pc
0.5 0.5 0.25 0 k
Pc
0.75 0.75 0.375 0 k
Pc
1 1 0.5 0 k
Pc
0 0 0 0 k
Pc
0.125 0.25 0.125 0 k
Pc
0.25 0.5 0.25 0 k
Pc
0.375 0.75 0.375 0 k
Pc
0.5 1 0.5 0 k
Pc
0.125 0.25 0.25 0 k
Pc
0.25 0.5 0.5 0 k
Pc
0.375 0.75 0.75 0 k
Pc
0.5 1 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0.125 0.25 0 k
Pc
0.25 0.25 0.5 0 k
Pc
0.375 0.375 0.75 0 k
Pc
0.5 0.5 1 0 k
Pc
0.25 0.125 0.25 0 k
Pc
0.5 0.25 0.5 0 k
Pc
0.75 0.375 0.75 0 k
Pc
1 0.5 1 0 k
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
0 O
1 g
0 R
0 G
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
106.2483 215.7481 m
106.2483 383.2481 l
4.2483 383.2481 l
4.2483 215.7481 l
106.2483 215.7481 l
b
506.7483 217.9981 m
506.7483 385.4981 l
404.7483 385.4981 l
404.7483 217.9981 l
506.7483 217.9981 l
b
303.2483 215.7481 m
303.2483 383.2481 l
201.2483 383.2481 l
201.2483 215.7481 l
303.2483 215.7481 l
b
1 1 1 0 K
10 M
124.9508 517.4944 m
124.9508 558.5056 92.7192 591.7518 52.9597 591.7518 c
13.2001 591.7518 -19.0314 558.5056 -19.0314 517.4944 c
-19.0314 476.4832 13.2001 443.2371 52.9597 443.2371 c
92.7192 443.2371 124.9508 476.4832 124.9508 517.4944 c
124.9508 517.4944 l
s
88.5988 517.4944 m
88.5988 538 72.6427 554.6231 52.9597 554.6231 c
33.2767 554.6231 17.3204 538 17.3204 517.4944 c
17.3204 496.9888 33.2767 480.3657 52.9597 480.3657 c
72.6427 480.3657 88.5988 496.9888 88.5988 517.4944 c
s
4 M
-2.8436 471.2947 m
-9.9058 552.4921 l
S
0.4232 567.6795 m
120.2024 542.1257 l
S
-17.5137 506.3667 m
60.1284 591.3753 l
S
101.2615 462.8868 m
55 443.2675 l
S
84.8952 583.8815 m
89.8358 453.9472 l
S
103.6313 465.2697 m
27.1347 448.2823 l
S
18.2453 582.3499 m
92.4555 579.3096 l
S
76.9629 447.5742 m
-4.4671 473.5071 l
S
-4.4406 561.5195 m
106.1047 566.9792 l
S
94.9454 577.5021 m
105.0894 466.8512 l
S
95.037 457.5565 m
-6.6272 476.7444 l
S
57.2205 591.619 m
111.6685 475.384 l
S
-13.3604 544.706 m
61.2068 591.2531 l
S
-18.2872 515.2893 m
-1.3241 565.6189 l
S
-18.3185 517.5796 m
36.4277 589.7268 l
S
59.0296 591.4821 m
110.6049 473.8183 l
S
5.6407 573.0281 m
62.8567 591.0324 l
S
51.2702 591.7309 m
112.727 557.9564 l
S
103.9514 465.6088 m
-17.2362 530.3865 l
S
57.658 443.3986 m
23.5847 585.1527 l
S
-18.3082 518.7643 m
104.4841 568.8057 l
S
17.8222 452.8868 m
-13.6044 544.0513 l
S
118.8408 489.1494 m
-3.1418 471.6884 l
S
97.1529 575.7562 m
44.4369 443.7698 l
S
-4.2576 473.2117 m
8.6641 575.672 l
S
25.0513 585.8231 m
117.0491 549.9933 l
S
56.0298 443.306 m
15.0314 454.6228 l
S
89.5448 453.7648 m
29.7433 447.2864 l
S
-14.9229 494.8477 m
37.6988 590.0298 l
S
23.4093 585.0697 m
59.7572 591.4133 l
S
-7.413 556.9691 m
53.145 591.7516 l
S
116.4071 551.333 m
81.4057 449.4068 l
S
35.9132 589.597 m
123.7079 526.5344 l
S
123.8491 509.7498 m
63.634 444.0745 l
S
97.5986 459.6025 m
23.6067 449.8259 l
S
-0.324 468.1718 m
84.1188 584.2807 l
S
34.8945 589.3272 m
123.9492 524.1719 l
S
7.5854 460.2263 m
-0.2226 566.9358 l
S
118.7093 488.8197 m
-7.8038 478.676 l
S
112.2848 476.332 m
7.2052 460.5555 l
S
113.529 478.3483 m
73.1914 446.2911 l
S
114.5455 554.8798 m
75.2055 446.9462 l
S
12.5301 456.3379 m
17.2026 581.7321 l
S
47.565 443.45 m
-10.3763 483.4299 l
S
122.5751 501.5481 m
114.9093 480.7671 l
S
87.6535 582.3618 m
89.3036 453.6152 l
S
120.4098 493.4861 m
99.3966 461.1584 l
S
107.9013 564.8016 m
100.3215 462.0003 l
S
-0.9553 468.9222 m
-16.5566 501.0854 l
S
119.1585 545.0244 m
82.0162 449.6871 l
S
122.7615 532.5301 m
69.9216 445.3703 l
S
50.1078 591.6923 m
113.2326 477.8547 l
S
5.6354 573.0233 m
119.2758 544.7164 l
S
-15.3797 538.5973 m
34.2931 589.1602 l
S
-7.4165 556.9635 m
101.7539 571.6248 l
S
124.0327 523.1261 m
78.2687 448.0758 l
S
-17.9928 510.4031 m
18.2075 582.3279 l
S
115.8672 552.4098 m
123.5948 507.541 l
S
122.8627 532.0108 m
69.0233 445.1474 l
S
-18.0499 523.9361 m
68.7962 589.8958 l
S
-13.0609 545.4854 m
97.5307 575.4431 l
S
66.1869 590.4619 m
105.9286 567.1838 l
S
117.9745 547.933 m
74.3867 446.6717 l
S
62.4777 591.0867 m
94.5997 577.763 l
S
17.326 581.8065 m
124.0363 511.9121 l
S
-15.7486 537.2546 m
50.1699 591.6949 l
S
-8.1026 555.8007 m
26.0767 586.2679 l
S
116.6454 550.8437 m
43.9752 443.8294 l
S
25.4505 448.9903 m
15.6031 454.2523 l
S
115.9205 552.3054 m
100.3074 461.9874 l
S
-17.694 527.3027 m
16.6849 581.4163 l
S
-3.0746 563.3897 m
93.1394 578.8293 l
S
70.3307 589.5128 m
115.0802 553.907 l
S
-5.6196 475.1885 m
17.0115 581.6162 l
S
106.6365 566.3521 m
4.2413 463.2899 l
S
48.1855 443.4039 m
2.6918 570.1412 l
S
79.459 448.5596 m
-16.3559 534.8003 l
S
40.5182 590.6118 m
103.4689 465.0993 l
S
61.8419 443.8159 m
-13.4508 490.5233 l
S
4.8022 462.7485 m
52.8531 591.7517 l
S
-18.0404 524.0497 m
39.0662 590.3274 l
S
120.903 539.9426 m
38.1116 444.8661 l
S
94.3582 577.9432 m
119.9134 492.023 l
S
1.0979 466.5535 m
-15.4898 538.2067 l
S
7.1333 460.6183 m
-9.1228 553.9776 l
S
92.3318 579.3952 m
122.681 502.0592 l
S
124.1902 514.7805 m
-17.8024 508.5737 l
S
25.7754 448.8497 m
2.0823 465.4872 l
S
73.5534 446.4039 m
18.5128 452.4843 l
S
-12.8897 545.9194 m
49.2319 591.6501 l
S
104.263 569.0456 m
98.746 460.5835 l
S
59.9091 443.5908 m
-14.0496 492.1817 l
S
29.6291 447.3275 m
-1.9937 564.7869 l
S
85.3444 583.6449 m
109.1694 471.8328 l
S
33.4333 446.0778 m
-2.4539 564.2004 l
S
32.5162 446.3568 m
-13.3902 544.6269 l
S
-3.7753 562.4456 m
56.2789 591.6712 l
S
70.7073 445.5757 m
-13.2364 489.9572 l
S
100.0014 573.2832 m
81.1967 449.3125 l
S
52.2483 591.7481 m
118.4703 488.2323 l
S
327.2516 518.9907 m
327.2516 560.0019 293.4476 593.2481 251.7483 593.2481 c
210.0489 593.2481 176.2449 560.0019 176.2449 518.9907 c
176.2449 477.9795 210.0489 444.7334 251.7483 444.7334 c
293.4476 444.7334 327.2516 477.9795 327.2516 518.9907 c
327.2516 518.9907 l
s
251.7483 481.862 m
251.7483 556.1194 l
S
192.5023 473.7058 m
310.9942 473.7058 l
S
212.5845 455.7394 m
290.912 455.7394 l
S
210.2752 457.2088 m
293.2212 457.2088 l
S
211.7364 581.7162 m
291.7601 581.7162 l
S
181.0955 494.7282 m
322.401 494.7282 l
S
211.1986 581.3745 m
292.2978 581.3745 l
S
177.639 509.2456 m
325.8574 509.2456 l
S
219.2205 452.1315 m
284.276 452.1315 l
S
214.9799 454.3362 m
288.5166 454.3362 l
S
177.0102 517.3729 m
326.4862 517.3729 l
S
208.8276 579.7892 m
294.6687 579.7892 l
S
180.2351 497.3573 m
323.2612 497.3573 l
S
226.9951 448.9223 m
276.5012 448.9223 l
S
193.4622 565.4885 m
310.0343 565.4885 l
S
217.9272 585.2138 m
285.5693 585.2138 l
S
183.3049 489.1259 m
320.1916 489.1259 l
S
192.2982 564.011 m
311.1983 564.011 l
S
193.4544 565.4789 m
310.042 565.4789 l
S
194.2882 471.4893 m
309.2082 471.4893 l
S
177.3274 526.0124 m
326.169 526.0124 l
S
177.328 511.9637 m
326.1685 511.9637 l
S
182.427 491.1949 m
321.0693 491.1949 l
S
190.7888 561.9732 m
312.7077 561.9732 l
S
177.0041 520.3051 m
326.4924 520.3051 l
S
198.2901 467.0835 m
305.2064 467.0835 l
S
179.0157 536.1497 m
324.4808 536.1497 l
S
206.1716 577.851 m
297.3251 577.851 l
S
177.4277 510.9883 m
326.0686 510.9883 l
S
200.8423 573.3707 m
302.6542 573.3707 l
S
180.0634 540.0558 m
323.4331 540.0558 l
S
224.005 450.0364 m
279.4915 450.0364 l
S
199.1678 466.2064 m
304.3289 466.2064 l
S
204.3598 461.5596 m
299.1369 461.5596 l
S
179.6194 538.5028 m
323.8771 538.5028 l
S
182.2292 546.2944 m
321.2673 546.2944 l
S
199.0762 466.2965 m
304.4203 466.2965 l
S
187.9006 557.6146 m
315.5959 557.6146 l
S
178.3143 505.0874 m
325.1822 505.0874 l
S
198.4044 571.0139 m
305.0921 571.0139 l
S
177.2229 524.8169 m
326.2736 524.8169 l
S
207.3432 578.7282 m
296.1531 578.7282 l
S
192.1896 474.1123 m
311.3069 474.1123 l
S
185.5388 553.4688 m
317.9577 553.4688 l
S
181.6781 493.1142 m
321.8184 493.1142 l
S
191.7985 563.3524 m
311.6978 563.3524 l
S
224.623 449.7942 m
278.8735 449.7942 l
S
177.7097 508.7287 m
325.7868 508.7287 l
S
181.3619 493.9753 m
322.1345 493.9753 l
S
201.3979 573.8786 m
302.0988 573.8786 l
S
182.7332 547.528 m
320.7633 547.528 l
S
185.5007 553.396 m
317.9958 553.396 l
S
182.8179 547.7294 m
320.6786 547.7294 l
S
187.597 557.1153 m
315.8993 557.1153 l
S
190.7129 476.1147 m
312.7835 476.1147 l
S
217.6654 585.0811 m
285.8312 585.0811 l
S
207.6063 578.9203 m
295.8901 578.9203 l
S
177.4181 511.0773 m
326.0783 511.0773 l
S
225.9263 588.6775 m
277.5702 588.6775 l
S
193.2447 565.2183 m
310.2516 565.2183 l
S
178.0547 506.5166 m
325.4416 506.5166 l
S
177.2749 512.5413 m
326.2216 512.5413 l
S
181.9624 492.3669 m
321.5339 492.3669 l
S
177.1524 514.1347 m
326.3441 514.1347 l
S
194.0265 566.1779 m
309.47 566.1779 l
S
210.8128 456.8561 m
292.6837 456.8561 l
S
191.8229 563.3847 m
311.6735 563.3847 l
S
177.0798 515.4013 m
326.4167 515.4013 l
S
177.5375 527.9412 m
325.959 527.9412 l
S
183.6421 549.6071 m
319.8544 549.6071 l
S
202.9599 575.2534 m
300.5366 575.2534 l
S
210.5462 580.9513 m
292.9503 580.9513 l
S
186.5872 482.5953 m
316.9093 482.5953 l
S
194.7608 470.9307 m
308.7355 470.9307 l
S
182.9972 489.8311 m
320.4991 489.8311 l
S
177.2785 525.481 m
326.218 525.481 l
S
177.1289 523.4759 m
326.3675 523.4759 l
S
188.2498 479.8028 m
315.2467 479.8028 l
S
227.6743 589.2923 m
275.822 589.2923 l
S
177.3437 511.8012 m
326.1528 511.8012 l
S
228.5388 448.4029 m
274.9577 448.4029 l
S
178.6305 503.5305 m
324.8659 503.5305 l
S
210.2313 457.2379 m
293.2651 457.2379 l
S
176.9949 519.6052 m
326.5014 519.6052 l
S
179.878 539.4226 m
323.6185 539.4226 l
S
183.2897 548.8213 m
320.2068 548.8213 l
S
202.1128 463.464 m
301.3838 463.464 l
S
200.2938 465.1224 m
303.2026 465.1224 l
S
186.9521 556.0233 m
316.5444 556.0233 l
S
190.2584 476.76 m
313.2378 476.76 l
S
180.1996 497.4734 m
323.2969 497.4734 l
S
201.8515 574.2859 m
301.6448 574.2859 l
S
183.2745 489.1946 m
320.222 489.1946 l
S
178.6324 534.459 m
324.8641 534.459 l
S
178.9927 501.9276 m
324.5037 501.9276 l
S
227.2064 589.1324 m
276.2901 589.1324 l
S
187.9199 480.3351 m
315.5765 480.3351 l
S
177.6856 529.0798 m
325.8108 529.0798 l
S
186.1864 554.6689 m
317.3099 554.6689 l
S
181.688 544.8933 m
321.8085 544.8933 l
S
531.5314 518.2481 m
531.5314 559.1315 496.1154 592.2742 452.4275 592.2742 c
408.7397 592.2742 373.3236 559.1315 373.3236 518.2481 c
373.3236 477.3646 408.7397 444.222 452.4275 444.222 c
496.1154 444.222 531.5314 477.3646 531.5314 518.2481 c
531.5314 518.2481 l
s
413.2671 582.3565 m
413.2671 454.1397 l
S
530.7483 518.2481 m
408.0881 579.2692 l
S
530.7483 518.2481 m
512.8164 565.3863 l
S
530.7483 518.2481 m
378.4674 542.6039 l
S
530.7483 518.2481 m
530.4017 511.2918 l
S
530.7483 518.2481 m
518.7411 557.6359 l
S
530.7483 518.2481 m
402.3755 575.1855 l
S
530.7483 518.2481 m
422.136 449.9828 l
S
530.7483 518.2481 m
528.6439 535.2925 l
S
530.7483 518.2481 m
382.3992 485.0976 l
S
530.7483 518.2481 m
528.9584 502.5126 l
S
530.7483 518.2481 m
374.5157 510.6941 l
S
530.7483 518.2481 m
530.6063 522.7014 l
S
530.7483 518.2481 m
375.8022 502.9294 l
S
530.7483 518.2481 m
528.2285 536.8741 l
S
530.7483 518.2481 m
403.6638 460.3206 l
S
530.7483 518.2481 m
392.397 470.7028 l
S
530.7483 518.2481 m
391.709 565.0067 l
S
530.7483 518.2481 m
418.6259 451.4711 l
S
530.7483 518.2481 m
442.9678 591.7322 l
S
530.7483 518.2481 m
508.4253 570.0029 l
S
530.7483 518.2481 m
393.4991 567.0098 l
S
530.7483 518.2481 m
529.0182 533.7209 l
S
530.7483 518.2481 m
530.7191 516.2253 l
S
530.7483 518.2481 m
530.6118 522.6155 l
S
530.7483 518.2481 m
453.8811 444.2347 l
S
530.7483 518.2481 m
527.2223 496.2869 l
S
530.7483 518.2481 m
471.0209 446.3382 l
S
530.7483 518.2481 m
520.1271 555.4703 l
S
530.7483 518.2481 m
529.9474 507.6892 l
S
530.7483 518.2481 m
485.9385 585.156 l
S
530.7483 518.2481 m
530.6652 521.6536 l
S
530.7483 518.2481 m
455.1526 592.2294 l
S
530.7483 518.2481 m
515.8327 561.7044 l
S
530.7483 518.2481 m
508.8638 569.5757 l
S
530.7483 518.2481 m
374.1069 518.1863 l
S
530.7483 518.2481 m
461.0565 444.6727 l
S
530.7483 518.2481 m
517.7317 559.115 l
S
530.7483 518.2481 m
489.4797 583.4664 l
S
530.7483 518.2481 m
454.5003 444.2479 l
S
530.7483 518.2481 m
492.1132 582.0673 l
S
530.7483 518.2481 m
430.389 589.2831 l
S
530.7483 518.2481 m
388.1157 475.9986 l
S
530.7483 518.2481 m
511.2796 567.092 l
S
530.7483 518.2481 m
390.8805 472.4675 l
S
530.7483 518.2481 m
518.457 478.4359 l
S
530.7483 518.2481 m
530.6517 514.5759 l
S
530.7483 518.2481 m
524.6065 546.9836 l
S
530.7483 518.2481 m
514.5975 473.2258 l
S
530.7483 518.2481 m
380.2483 489.513 l
S
530.7483 518.2481 m
431.4682 589.5743 l
S
530.7483 518.2481 m
379.7863 490.5724 l
S
530.7483 518.2481 m
529.8292 529.5548 l
S
530.7483 518.2481 m
523.8009 487.7679 l
S
530.7483 518.2481 m
405.7819 577.7135 l
S
530.7483 518.2481 m
377.8432 540.8395 l
S
530.7483 518.2481 m
441.8479 591.5958 l
S
530.7483 518.2481 m
382.4839 551.5579 l
S
530.7483 518.2481 m
522.3412 551.6142 l
S
530.7483 518.2481 m
522.3105 484.8248 l
S
530.7483 518.2481 m
508.8457 466.9026 l
S
530.7483 518.2481 m
524.0666 488.3297 l
S
530.7483 518.2481 m
507.7292 570.6673 l
S
530.7483 518.2481 m
525.7133 544.3615 l
S
530.7483 518.2481 m
439.0814 591.1915 l
S
530.7483 518.2481 m
402.2277 461.4269 l
S
530.7483 518.2481 m
482.395 586.6411 l
S
530.7483 518.2481 m
392.3321 565.7203 l
S
530.7483 518.2481 m
512.9839 471.3021 l
S
530.7483 518.2481 m
512.7424 471.0252 l
S
530.7483 518.2481 m
472.4118 446.6724 l
S
530.7483 518.2481 m
385.9642 479.0862 l
S
530.7483 518.2481 m
374.4591 525.2614 l
S
530.7483 518.2481 m
504.5809 573.4749 l
S
530.7483 518.2481 m
428.5119 447.7576 l
S
530.7483 518.2481 m
492.0346 582.111 l
S
530.7483 518.2481 m
518.0802 558.6129 l
S
530.7483 518.2481 m
520.7523 482.0609 l
S
530.7483 518.2481 m
504.9467 463.3319 l
S
530.7483 518.2481 m
452.0776 592.2734 l
S
530.7483 518.2481 m
374.2377 522.5255 l
S
530.7483 518.2481 m
526.9526 495.4824 l
S
530.7483 518.2481 m
525.3811 491.3164 l
S
530.7483 518.2481 m
380.0153 546.4545 l
S
530.7483 518.2481 m
450.4915 592.2516 l
S
530.7483 518.2481 m
468.4427 590.71 l
S
530.7483 518.2481 m
407.0198 578.5633 l
S
530.7483 518.2481 m
422.6204 449.7925 l
S
530.7483 518.2481 m
405.141 577.2595 l
S
530.7483 518.2481 m
487.5193 584.428 l
S
530.7483 518.2481 m
523.5406 487.2289 l
S
530.7483 518.2481 m
430.0957 589.2012 l
S
530.7483 518.2481 m
414.5493 583.0412 l
S
530.7483 518.2481 m
530.7467 517.8066 l
S
530.7483 518.2481 m
500.068 577.0046 l
S
530.7483 518.2481 m
521.2185 482.8586 l
S
530.7483 518.2481 m
529.3954 531.9472 l
S
530.7483 518.2481 m
511.1537 469.269 l
S
530.7483 518.2481 m
489.746 453.1655 l
S
530.7483 518.2481 m
417.0307 452.2135 l
S
530.7483 518.2481 m
513.5213 471.9283 l
S
10 M
46.2274 231.9162 m
46.2274 349.6221 l
S
0 To
1 0 0 1 18.8594 231.5951 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
0 G
4 M
/_Courier 11.9993 Tf
0 Ts
100 Tz
0 Tt
0 TA
%_ 0 XL
36 0 Xb
XB
0 0 0 TC
100 100 100 TW
0 0 0 Ti
0 Ta
0 0 2 2 3 Th
0 Tq
0 0 Tl
0 Tc
0 Tw
( .0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 18.8594 348.301 0 Tp
TP
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 R
0 G
43.5816 232.5814 m
45.2481 232.5814 l
S
43.2483 238.7481 m
44.9149 238.7481 l
S
43.5816 249.9148 m
45.2481 249.9148 l
S
43.5816 261.9148 m
45.2481 261.9148 l
S
43.5816 273.9148 m
45.2481 273.9148 l
S
43.5816 285.9148 m
45.2481 285.9148 l
S
43.5816 297.9148 m
45.2481 297.9148 l
S
43.5816 309.9148 m
45.2481 309.9148 l
S
43.7483 321.2481 m
45.4149 321.2481 l
S
43.9149 333.9148 m
45.5814 333.9148 l
S
43.5816 343.9148 m
45.2481 343.9148 l
S
43.5816 243.9148 m
46.0816 243.9148 l
S
42.9149 256.5814 m
45.4149 256.5814 l
S
0 To
1 0 0 1 18.8594 254.1363 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .2) Tx 
(\r) TX 
TO
42.9149 268.5814 m
45.4149 268.5814 l
S
42.9149 279.9148 m
45.4149 279.9148 l
S
0 To
1 0 0 1 18.8594 277.6775 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .4) Tx 
(\r) TX 
TO
42.9149 291.9148 m
45.4149 291.9148 l
S
42.9149 303.2481 m
45.4149 303.2481 l
S
0 To
1 0 0 1 18.8594 301.2187 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .6) Tx 
(\r) TX 
TO
42.9149 315.2481 m
45.4149 315.2481 l
S
42.9149 327.9148 m
45.4149 327.9148 l
S
0 To
1 0 0 1 18.8594 324.7599 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .8) Tx 
(\r) TX 
TO
42.9149 338.5814 m
45.4149 338.5814 l
S
43.2483 349.2481 m
45.7483 349.2481 l
S
0 To
1 0 0 1 18.8594 348.301 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
(1.0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 254.2483 292.3731 0 Tp
TP
2 Tr
(.488) Tx 
(\r) TX 
TO
0.25 0 0 0 k
93.5043 231.735 m
93.5043 267.0468 l
55.171 267.0468 l
55.171 231.735 l
93.5043 231.735 l
b
1 1 1 0 K
93.5043 228.235 m
55.171 228.235 l
S
0 To
1 0 0 1 54.7483 270.2481 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
0 G
(.227) Tx 
(\r) TX 
TO
1 1 1 0 K
10 M
244.2274 230.4162 m
244.2274 348.1221 l
S
0 To
1 0 0 1 216.8594 230.0951 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
0 G
4 M
( .0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 216.8594 346.801 0 Tp
TP
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 R
0 G
241.5816 231.0814 m
243.2481 231.0814 l
S
241.2483 237.2481 m
242.9149 237.2481 l
S
241.5816 248.4148 m
243.2481 248.4148 l
S
241.5816 260.4148 m
243.2481 260.4148 l
S
241.5816 272.4148 m
243.2481 272.4148 l
S
241.5816 284.4148 m
243.2481 284.4148 l
S
241.5816 296.4148 m
243.2481 296.4148 l
S
241.5816 308.4148 m
243.2481 308.4148 l
S
241.7483 319.7481 m
243.4149 319.7481 l
S
241.9149 332.4148 m
243.5814 332.4148 l
S
241.5816 342.4148 m
243.2481 342.4148 l
S
241.5816 242.4148 m
244.0816 242.4148 l
S
240.9149 255.0814 m
243.4149 255.0814 l
S
0 To
1 0 0 1 216.8594 252.6363 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .2) Tx 
(\r) TX 
TO
240.9149 267.0814 m
243.4149 267.0814 l
S
240.9149 278.4148 m
243.4149 278.4148 l
S
0 To
1 0 0 1 216.8594 276.1775 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .4) Tx 
(\r) TX 
TO
240.9149 290.4148 m
243.4149 290.4148 l
S
240.9149 301.7481 m
243.4149 301.7481 l
S
0 To
1 0 0 1 216.8594 299.7187 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .6) Tx 
(\r) TX 
TO
240.9149 313.7481 m
243.4149 313.7481 l
S
240.9149 326.4148 m
243.4149 326.4148 l
S
0 To
1 0 0 1 216.8594 323.2599 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .8) Tx 
(\r) TX 
TO
240.9149 337.0814 m
243.4149 337.0814 l
S
241.2483 347.7481 m
243.7483 347.7481 l
S
0 To
1 0 0 1 216.8594 346.801 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
(1.0) Tx 
(\r) TX 
TO
1 1 1 0 K
10 M
447.0608 234.5828 m
447.0608 352.2887 l
S
0 To
1 0 0 1 419.6927 234.2618 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
0 G
4 M
( .0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 419.6927 350.9677 0 Tp
TP
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 R
0 G
444.4149 235.2481 m
446.0816 235.2481 l
S
444.0816 241.4148 m
445.7481 241.4148 l
S
444.4149 252.5814 m
446.0816 252.5814 l
S
444.4149 264.5814 m
446.0816 264.5814 l
S
444.4149 276.5814 m
446.0816 276.5814 l
S
444.4149 288.5814 m
446.0816 288.5814 l
S
444.4149 300.5814 m
446.0816 300.5814 l
S
444.4149 312.5814 m
446.0816 312.5814 l
S
444.5816 323.9148 m
446.2481 323.9148 l
S
444.7481 336.5814 m
446.4147 336.5814 l
S
444.4149 346.5814 m
446.0816 346.5814 l
S
444.4149 246.5814 m
446.9149 246.5814 l
S
443.7483 259.2481 m
446.2483 259.2481 l
S
0 To
1 0 0 1 419.6927 256.803 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .2) Tx 
(\r) TX 
TO
443.7483 271.2481 m
446.2483 271.2481 l
S
443.7483 282.5814 m
446.2483 282.5814 l
S
0 To
1 0 0 1 419.6927 280.3442 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .4) Tx 
(\r) TX 
TO
443.7483 294.5814 m
446.2483 294.5814 l
S
443.7483 305.9148 m
446.2483 305.9148 l
S
0 To
1 0 0 1 419.6927 303.8854 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .6) Tx 
(\r) TX 
TO
443.7483 317.9148 m
446.2483 317.9148 l
S
443.7483 330.5814 m
446.2483 330.5814 l
S
0 To
1 0 0 1 419.6927 327.4266 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
( .8) Tx 
(\r) TX 
TO
443.7483 341.2481 m
446.2483 341.2481 l
S
444.0816 351.9148 m
446.5816 351.9148 l
S
0 To
1 0 0 1 419.6927 350.9677 0 Tp
TP
2 Tr
0 O
1 1 1 0 k
(1.0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 457.7483 284.7481 0 Tp
TP
2 Tr
0 g
(.332) Tx 
(\r) TX 
TO
54.7483 228.2481 m
54.7483 224.7481 l
F
93.5043 228.235 m
93.5043 224.735 l
F
0 R
1 1 1 0 K
496.9149 231.7481 m
458.5816 231.7481 l
S
0 O
0 g
458.1589 231.2612 m
458.1589 227.7612 l
F
496.9149 231.2481 m
496.9149 227.7481 l
F
0 To
1 0 0 1 45.7483 367.2481 0 Tp
TP
2 Tr
0 R
0 G
(10000) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.7537 367.2175 0 Tp
TP
2 Tr
(10000) Tx 
(\r) TX 
TO
0 To
1 0 0 1 446.2537 371.2175 0 Tp
TP
2 Tr
(10000) Tx 
(\r) TX 
TO
0.25 0 0 0 k
292.7483 230.2481 m
292.4983 289.2481 l
253.9983 289.2481 l
254.2483 230.2481 l
292.7483 230.2481 l
B
1 1 1 0 K
293.4149 226.7481 m
255.0816 226.7481 l
S
0 O
0 g
254.6589 226.7612 m
254.6589 223.2612 l
F
293.4149 226.7481 m
293.4149 223.2481 l
F
0.25 0 0 0 k
0 R
0 G
496.4149 235.2481 m
458.0816 235.2481 l
458.2483 280.7481 l
496.5816 280.7481 l
496.4149 235.2481 l
b
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
