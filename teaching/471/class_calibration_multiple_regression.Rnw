\documentclass[14pt]{extarticle}
\renewcommand{\baselinestretch}{1.2}
\usepackage{hyperref}
\begin{document}
\SweaveOpts{prefix.string=.figures/calibration}


\section{Admistrivia}

\begin{itemize}
\item Google scholar / science citation.  Google works much better in
terms of user interface.
\item Bit / Bytes 
\begin{itemize}
\item 1 Byte = 8 bits
\item LZ is a compression scheme
\item Entropy: called  $H(X) = - \sum_x \log(p(x)) p(x)$, entropy of
one word
\item Entropy of $n$ words is $nH$.
\item Key idea: 
\begin{eqnarray*}
nH & = & \sum_{i=1}^n H(X_i) \\
 & \approx & - \sum_{i=1}^n \log(p(x_i)) \\
\end{eqnarray*}
\end{itemize}
\item Negative weights in PCAs?
\item No office hours with Sivan on tuesday
\end{itemize}


\title{Class: Calibration for multiple regression}
\maketitle
We will continue following the ``jmp'' notes from last time.  This
file will say a bit about how to do it in R.  Sivan will also be doing
it live in R, so she will have other tricks. 


\section{Boston housing}
Let's first grab some data about how sales are related to how many feet of display are made.

<<grabData>>=

boston <- read.csv("http://gosset.wharton.upenn.edu/~foster/auction/boston.csv",header=TRUE)
names(boston)

@ 
We are trying to predict CMEDV (or the corrected median house value).
So let's build a regression for this:

<<model>>=

regr <- lm(CMEDV ~ NOX + DIS + LSTAT + PTRATIO + ZN, data = boston)
summary(regr)

@ 

<<prettymodel,results=tex>>=
require("xtable")
xtable(summary(regr))
@ 

We can now look at how our predictions match our data:

<<>>=

fit <- predict(regr)

@ 
And as a picture:
<<fig=TRUE>>=

plot(boston$CMEDV ~ fit)
abline(0,1)

@ 

We can add a lowess to look for curvature:
<<fig=TRUE>>=
plot(boston$CMEDV ~ fit)
lines(stats::lowess(boston$CMEDV ~fit,f=.1))
@ 

But let's use a polynomial so we can test it:

<<fig=FALSE>>=

poly.regr <- lm(boston$CMEDV ~ poly(fit,degree=5,raw=TRUE))
summary(poly.regr)

@ 

We can look at this calibration plot now:

<<fig=TRUE>>=

poly.fit <- predict(poly.regr);
plot(boston$CMEDV ~ fit);
lines(fit,poly.fit)

@ 

Our calibration plot should now look better if we use the new
polynomial forecasts:
<<fig=TRUE>>=

plot(boston$CMEDV ~ poly.fit)
lines(stats::lowess(boston$CMEDV ~poly.fit,f=.1))

@ 

\section{Alternative approach}

This is now a huge polynomial.  We could try to find a smaller one. 


\end{document}
